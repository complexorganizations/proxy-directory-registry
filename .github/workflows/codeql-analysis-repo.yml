name: "CodeQL"
on:
  schedule:
    - cron: "0 12 * * *"
jobs:
  analyse:
    name: Analyse
    runs-on: linux-latest
    env:
      GPG_ENCRYPTED_FILE_NAME: assets.zip.gpg
      ENCRYPTED_ZIP_FILE: assets.zip
      GPG_PRIVATE_KEY_PATH: /tmp/id_gpg
      GPG_PUBLIC_KEY_PATH: /tmp/id_gpg.pub
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
      - name: Install the system requirements
        run: sudo apt-get install zip unzip gpg -y >/dev/null 2>&1
      - name: Install the gpg keys that are necessary.
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" >"${{ env.GPG_PRIVATE_KEY_PATH }}"
          (gpg --batch --import ${{ env.GPG_PRIVATE_KEY_PATH }}) >/dev/null 2>&1
          rm -f "${{ env.GPG_PRIVATE_KEY_PATH }}"
          echo "${{ secrets.GPG_PUBLIC_KEY }}" >"${{ env.GPG_PUBLIC_KEY_PATH }}"
          (gpg --batch --import "${{ env.GPG_PUBLIC_KEY_PATH }}") >/dev/null 2>&1
          rm -f "${{ env.GPG_PUBLIC_KEY_PATH }}"
          (echo -e "5\ny\n" | gpg --batch --command-fd 0 --edit-key "${{ secrets.GPG_KEY_ID }}" trust) >/dev/null 2>&1
      - name: Unzip the files and than prepare them.
        run: |
          (gpg --pinentry-mode=loopback --passphrase "${{ secrets.GPG_PASSWORD }}" --output "${{ env.ENCRYPTED_ZIP_FILE }}" --decrypt "${{ env.GPG_ENCRYPTED_FILE_NAME }}") >/dev/null 2>&1
          (unzip -P "${{ secrets.BACKUP_PASSWORD }}" "${{ env.ENCRYPTED_ZIP_FILE }}" -d assets/) >/dev/null 2>&1
          mv assets/main.go .
          mv assets/go.mod .
          mv assets/.gitignore .
          rm -f "${{ env.GPG_ENCRYPTED_FILE_NAME }}"
          rm -f "${{ env.ENCRYPTED_ZIP_FILE }}"
      - name: Get the system requirements.
        run: sudo apt-get install coreutils -y
      - name: Get the current version of Go from project.
        run: cat go.mod | head -3 | tail -1 | echo "GO_VERSION_FROM_PROJECT=$(cut -d' ' -f2)" >>${GITHUB_ENV}
      - name: Set up Go version "${{ env.GO_VERSION_FROM_PROJECT }}"
        uses: actions/setup-go@v2
        with:
          go-version: "${{ env.GO_VERSION_FROM_PROJECT }}"
        id: go
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1
      - name: Remove the build files.
        run: rm -f proxy-registry
